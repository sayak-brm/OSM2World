package org.osm2world.core.osm.creation;

import java.io.*;

import org.osm2world.core.osm.creation.OSMStreamReader.CompressionMethod;
import org.osm2world.core.osm.data.OSMData;

/**
 * {@link OSMDataReader} providing information from a single .osm file, including common
 * non-standard variants such as those files produced by JOSM. The file is read
 * during the {@link #getAllData()} call, there will be no updates when the file is
 * changed later. This class internally uses osm4j to read the file.
 */
public record OSMFileReader(File file) implements OSMDataReader {

	@Override
	public OSMData getAllData() throws IOException {

		if (!file.exists()) {
			throw new FileNotFoundException(file.toString());
		}

		if (!isJOSMGenerated(file)) {

			/* try to read file using osm4j */

			try (FileInputStream is = new FileInputStream(file)) {
				return new OSMStreamReader(is, CompressionMethod.fromFileName(file.getName()), false).getAllData();
			} catch (IOException e) {
				System.out.println("could not read file, trying workaround for files created by JOSM");
			}

		}

		/* try reading the file while taking into account JOSM-specific extensions */

		try (FileInputStream is = new FileInputStream(file)) {
			return new OSMStreamReader(is, CompressionMethod.fromFileName(file.getName()), true).getAllData();
		} catch (Exception e2) {
			throw new IOException("could not read OSM file (not even with workaround for JOSM files)", e2);
		}

	}

	/**
	 * Returns true if the file was identified as being generated by JOSM.
	 * This method peeks into the first lines of the file,
	 * trying to find the generator tag.
	 */
	public static final boolean isJOSMGenerated(File file) {

		try (BufferedReader reader = new BufferedReader(new FileReader(file))) {

			for (int i=0; i<100; i++) {
				String line = reader.readLine();
				if (line != null) {
					if (line.contains("generator='JOSM'")) {
						return true;
					}
				}
			}

		} catch (IOException e) {
			// ignore
		}

		return false;

	}

}
